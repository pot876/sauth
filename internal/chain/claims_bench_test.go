package chain

import (
	"context"
	"crypto/rsa"
	"testing"
	"time"

	"github.com/pot876/sauth/internal/util"

	"github.com/stretchr/testify/require"
)

// 4096
// const TEST_ACCESS_TOKEN_PRIVATE_KEY = "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS3dJQkFBS0NBZ0VBdmVybEMyNTBKQ2tHRnFndlJGczNsNzdwdnF3eURGNjFDRWZRSy9oVS9udUZHbDZTCkVJdWpicVZUQjVTK0hJbHBxMU03eFBGaVJJek84S2E5SWFpa2t1bnh0TnJ2MkVreVNFNmZZamY5WXdMTkVZaDYKeURKQUZWa280cWFxeVRObTY1MUthcHZXMkpBM0dkMHVXOEVVREZ2bmorK0JOWHRnaWJ3eE9BaG5pL3IvYlJlagozMS9kcEZQZ1RWMmNHeFVuQXVLYWZDTFlKd09zMlVIclRrOGdON3ByNTZHYTIvNkVQcHpYY1hna1F3YmdZYXZICjMwZnlJcFdNcGxyVTRvWS9DblBIYUEzZHo0amw2UlFXcktSS0VIK2xGWjNJTlVraTcrazNLQllNNlFWbTNyWVQKL09sTGlMeFBzQk5rZTJsYVdScUFIditpeTJjcjlyUE8vbkNoV1MycGxlYnFYMVF3eTNybEovQ0RtZjdLWVFUZgp6Yzl6Q3ZMR2x1RGpXTXVyOXBOcGRRdTQ3QW1UUlRzbWdORUFXdU9zK3ZaRkVZUS9hTmVMUDluMEJzcG9WTjl3CmFCK09FNWY5OVVxY0NoVmhVeGRZeHJ2TkFheTFQVy9KTzhJeHZuRUVsUExxNnJoRzJKc25uWm1WM3J2VWw0VGUKWjZWTmxYMytnUTZXWWVLUUx1Q2pLU21LdE1xOFcxNFVUOE9hUXU0UWlQM25SQ1lGMTlQUU0vb3RpSTFuaGtUVAovTkEvMGNFcU4ydVJaaFNuTlA3NXlmRUtzZEh2U0F6QnFtMUdqT25SMzVRcGsxU3FjRkFRblhXLzJYUjRjdmVQClo4MFhxelZoeVJ6aC96NXh2cGpwWXNlWnREYVVMMEkvL3M5a0szWnFEbHg2Wi90ajJLQXB2YWtMa2hrQ0F3RUEKQVFLQ0FnRUFsaHpKUjl6WkxnL0RBVHVVaU1vMHlkdWI5QnMxUC9QSDBiQzVpVmV6RHFiaFVUTjQ3bDBCSkI3RwozeElocG5xeXJEbVEzNTBQMkRFWURMMHVkeUZPVzlWUU9HeG84YU1CZklld2tUakNMblZ6VTYxMXB6R1kxNGJ1CnV4K1RsSTd0aGNTQW9uMWxOeTNlYjdJVXgyOTRna0JPYXNXYmNvTi9qYjdUaEgrWUlOdVc4MHFoTzVrUm5xYXgKZjFWRFkyQzN3aDhNanB3WUQ5Wm0xQjYzZCtFeERQdHIrTjBTZzFyTWVwVUw4V05OL2pDOFFGZEFGMnROcHlwZgp6c215eFEzcFhFQ2hWOHpHQ3hrZzZMYjVLU0orYkVZSVhXcW1hZi9SL3FGdStGOWRldjNMRHJRS1huaWtQSUxqCjFiK3VSNkhCU1BhYVdHWWs3Zk14bThFS0ZyRTl4ZHVRK0FNNHRCSXFxWi9rNTdDSGRXMENJMS9YbUFzelFKL2QKUlNOQ0hwYVNVR3NWM2ZuWlRYWmtBUVBuMTQ3L2JhU0lmcU10UjRUNnVwVkNSRENKb1owRHg3NDJCZzZwdEpBTgpVZ21Hc255K1UvaW5VQnhhTlhxY3FLa28zc0VSMTliZUpVUmIvbGNQbjNZMXo4QSttNzZIemhka3dKeVl0SGRzCk1tS2VNWDc4Y2ZqZ2F3MGo2REloYXNyRjlnWFp1a2tIeHpML0toeUoyUFJsbGlKQnRTNXpSUHp6MVZ6OEhYQnEKVHJDV1ZYSjIxY1lNOGJPc1g0WWNRZjBBbklpMSs3WmRmT3htYWl4TGJSQkJJSVBxS2p5a2pxUVhFNG13SWw5bgppL2hTRVBPbHlKbytQL3BNL1JHdTdvZytxVlB4VmlDckJ2M2RZMzRaMTJiQU1rcHdHWkVDZ2dFQkFPSjJMU0txCnVnLzBDb05PU05UMDNQNTYrUGM3cTE1R2U5SmJxRDFoZDY0RGY3bFpZNnJsam4zMWhFSUxUcWx0OUluYTJZY20KWWxjc2ZuTTBobEFqWlRlN2RPOUtENXBmWGE0ZWFZc1k0TXJSMXJrKzZUVHI4VUxBdS8vZTladVFWL1BvcTUyYQpxTW9vdi91WVFnN3BLdzU3aDNZRHo1eXYzNzB3a0JvRmxDTENaOWx2dzVhdk5oSzhmclZTMlpnM2xrQllhendSCk1KVGxheHlGT004eWtrVzkrblY5U044ais3OEw4UFFSTkF5QkJiNUhmTUUyb3J6U2M1UWtXZjEvV0g3WSsvVlMKRGVGRjdCcUp1aEhndzRleElmMHNIZUxPWUdEbzRFeDVPbHRpNzhUaUZSMnJqSi9rN3lXNmM3Uk04OUlaN3E1ZgpoeGdzYS9KTXBnbmFLNlVDZ2dFQkFOYXdkK2NwQlFyKzNjUXMybUxLYWJ4N3lKd25TUjUrUEhpbHhzVGhHM2p1Cm9YUm8yYlZISmxYQmtQOG1wM0xVSERzbytHd1BxWUdleHF2YTVCL2F5b2RxWGQxdVFWNWF1NVFLbEk0ejFsek0KSHRod1J2WC9pczJhelYzbUloQ1dGQ1dPaTVEL0l1SmhhZE53aktaa2VFVFA3ZWhydWFySDYxQlUxWEw2bDJRegpDMEZ4OCt6RzhJbWJJVGZ1YWpuQ0MxdkJpTmRnWnZXaDBYOHNocVY4OHZMQWNmVVAwRDJWYXF6dk41VUJHMmlOCkdHdlo4VU5GRDd6RUNDU3Z5aWE3cExLNVZyTkFLUDlZeVk2QnFTZE1qZzVGZm1sYUMwcWN1NGpKUDk5eWtwbEMKcXYwaHZLc0VoN2VFNXNZeHE0ZzhkdnU1NDVJNjlJVUpEU1hITHltUDBtVUNnZ0VCQU4vN0NDczRkcXhlcjZNcwo0MllWQlJxQklBclBMbkFoQUVpUE5QZjRsYms3WnJFNGt4WXMwMkVMV3BORHdicGJzVGhEaDFCZmkzWXk0S0lyCk9naTY2VnBWQXBQRlNXZGltVElrakRqeUV5c21uZHc4TjhXSzh1VVY0UnR5TnJOMDhUaWhVRk9oNnYxL2pscFcKUGtlbklGbkRuYmdBanUrbkY0QjBMcUkrRUVUTXlJL0xOY1NzYUt2aFdPVVlHM1NzemVPNFQ5OXFGUVcvWHRBbgpoNGVPdWhOV2tnaHdNSW5hZWh4N3dBWjFtV2dnbUVDWlRlOS9qVGQ2WXF3THhDR3dPU1BFa25jUmYvN2wvRjVICkNBeTBwRTlweDNjeWtpQ0lBOVQxbnhxajhDOEF6S3FLL1YyS0ZaenpmZ0J2eUE1MDZkWk1wY0E3WlU5b2FCK08KNWMzcXhhMENnZ0VCQU0wTzd1ZXZTVzdRTXZmK3MzVHF5d1hKNGJvczErMDFQQU1zckdjK2IrUVpZY056cG9ZOAplRVF1eDVTOTBmQ2U0bndyVE9UQ0xQQnV2R3BIZjk5aE5sTVRhS1pvZWkxcVVvSTdmTnM2YmdSaXZ3K1NabVR1CitTQWJQUTcwRWhOdmxieXRvMmNTR3JySnVxL0hiOEE2ZEptZFZTckxRaUw2SXl1dWE5WVB2bXhwU05Yd3hzQ2cKMy8wL1hBSTFTZWJ6RGJCTmNhdnVHMG1Bano1K1EvbHJHQTUvZkJsTFNtYVlBYlUrSkFQQmMvRnYyeVNnblkzWQpPQWpmNEx0UjRLOFFTV2FnR2t6SitwNnlxb25nRkxaQnErbTd2TnRac3pGSDlPUFkvWllxdEJXSkZSTUVsMVZ0CjFVZVh2R2tQNWp3UkxNQ1JNK2xuUUVpVmRhWmcwdzVLbmZVQ2dnRUJBS3Z2QlRhT1Q1ZXVyTkJiSjdQKzhKUkEKWkpnbXZwNnRVRkRHUGNHeTArZ3dFdkFUK1M0d2c0SGROeW5rVVcreSt2dzBSZU9EU3dDdGhFVkxrUnZ3Mmt2ZgpUKyt3TzBQVy9hVlZKVUxjd0ZFNUxDSTZ2ZkdxbFhzNGtUZDZYdG5XMWQ3OWpqVlJvZGtVUmNMSUVlSlFsOGNSCmNTNElGcnFDcE84cW5rdUdnQS9wRlZnVWFqbjFuSEt2N2dnYkJ0TkpKQzZGUzloZmN5OFpHNVJadDhCRnAyaGcKTXBMd0d5ZUhWbE9SNkFCYjdkc2hLdnA1bDYyYVBkZ0h1RnErNVYvNGhmTWFpN0RyRDR5bFJvN2s4VHFTbUs0UApqVnIwSW03MmE0L2RBc2x5OGNFTVNWU2o2bHF3UXptWVNtSWZlTjB6dWprd1BBaWo4TWFRRUNhV2NtU3NOQUE9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
// const TEST_ACCESS_TOKEN_PUBLIC_KEY = "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUF2ZXJsQzI1MEpDa0dGcWd2UkZzMwpsNzdwdnF3eURGNjFDRWZRSy9oVS9udUZHbDZTRUl1amJxVlRCNVMrSElscHExTTd4UEZpUkl6TzhLYTlJYWlrCmt1bnh0TnJ2MkVreVNFNmZZamY5WXdMTkVZaDZ5REpBRlZrbzRxYXF5VE5tNjUxS2FwdlcySkEzR2QwdVc4RVUKREZ2bmorK0JOWHRnaWJ3eE9BaG5pL3IvYlJlajMxL2RwRlBnVFYyY0d4VW5BdUthZkNMWUp3T3MyVUhyVGs4ZwpON3ByNTZHYTIvNkVQcHpYY1hna1F3YmdZYXZIMzBmeUlwV01wbHJVNG9ZL0NuUEhhQTNkejRqbDZSUVdyS1JLCkVIK2xGWjNJTlVraTcrazNLQllNNlFWbTNyWVQvT2xMaUx4UHNCTmtlMmxhV1JxQUh2K2l5MmNyOXJQTy9uQ2gKV1MycGxlYnFYMVF3eTNybEovQ0RtZjdLWVFUZnpjOXpDdkxHbHVEaldNdXI5cE5wZFF1NDdBbVRSVHNtZ05FQQpXdU9zK3ZaRkVZUS9hTmVMUDluMEJzcG9WTjl3YUIrT0U1Zjk5VXFjQ2hWaFV4ZFl4cnZOQWF5MVBXL0pPOEl4CnZuRUVsUExxNnJoRzJKc25uWm1WM3J2VWw0VGVaNlZObFgzK2dRNldZZUtRTHVDaktTbUt0TXE4VzE0VVQ4T2EKUXU0UWlQM25SQ1lGMTlQUU0vb3RpSTFuaGtUVC9OQS8wY0VxTjJ1UlpoU25OUDc1eWZFS3NkSHZTQXpCcW0xRwpqT25SMzVRcGsxU3FjRkFRblhXLzJYUjRjdmVQWjgwWHF6Vmh5UnpoL3o1eHZwanBZc2VadERhVUwwSS8vczlrCkszWnFEbHg2Wi90ajJLQXB2YWtMa2hrQ0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo="

// 2048
const TEST_ACCESS_TOKEN_PRIVATE_KEY = "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBc1ZjekFTaFErdGJna3NvRTZ0RFYxMTM5N0pPd0R3OGg2eWhhNFRhbi9jb3hFNUgyCkJybFM4eDFab0RrTVRGVmo2cTN1LzBtaml1QTg0Nlh3aEVWRGlJVlQ2T0RBd0o1UFNuSmlwUWdRZnYrM0NBTmYKbU0rZ3ZaQWRxYjRLVUlCRStnS2NtRkdnaysvUnFhOE9BbzluMmM0MWpPUVF5SlN3bXZtblBjLzFER01UYkI5Uwp6N2pKbkJnTzNrQ293RVozK1ViTTlPeVplNjgzUkxHNTRJTmNNMnlEa1lpakFhSXRIa3ZJU1BEdjkyTlY4Y2laCm8zL05JblFaamE5NVJvQ0FKYXIrZ3VMTUlldEN0VkIydTVKV0p2NEc2cmR4dlF2djZZc0Vzd3pzREpHUjJ1dVMKbjJHTG1sbHYvcE1Ca1BXTmhkYnZ3NjljbytZL1poMURJQ2JxTndJREFRQUJBb0lCQVFDWlkrRWNDVEV5SmhZTgpJV3ZyWjBMdmk3OE1tQm5haks0NzVxWGswdyt2TnVvSUVXSUtJdFlhcnJKTkljci9ZNFNQQW04TXBUY3Q4aEw0Cm5SbFNiMDZna1NJbzllNERMV3RMNjNCamFueEtQUWlsaDdWeVNYU3hRaXhHRzdoME5ONTBtVG0xampVa2dIU0wKSG4weHZiU0g4aExqa0lqcjFhQ0VDNWlhb0h0R2dDTUZPaXZvRjlXd3l5SXN1VkZkK2k3U1hveUxIV1ZIbm5teApRcVl0bVFpMkdTZnRhUVFWMlZYcm03Z29jdmpyQ2EvMDg0WGhjeFlZamRVUjEyZUloeWxvR0l4ZTNOMXJFOUNHCmxWOG9GUmJFMDE3cUVXdTByM2dxdDdyR3Z5SVhTYWRROG94TFlZTE5aS1QvL3gyekV3RFVUb0h5SUhoMUFuYksKTkhEOVRLZEJBb0dCQU55WlZaaXdza0pEMXRlbnBGclpCR01DZzQ3WHNNZjliM2pUb0QwcWZYRDNaclltVHo4WgpoU0k1OGlYZm81VVZUYzNucTFPUVVxcmJHMWp6N01jWE4vWENCQStoUlRvckV0bmwyYUVFNW1qaXNFdGZhNE9HCjhKVnpWMWFXUFNuVUgrSlBLTWFtWWJTVlhzdkNtL1lWQWU2blhGbG00bjdIT1d0MHBLV1ZQTk9SQW9HQkFNM00KdU5UbzE2bFpJdHp5TDAvcnREbzExQk1XRkpiemFDemFSaU54em02L1ZXVG5rUDczd29YVFBxZ0FZMDVmbkc2YQpGeFU1YkdFblQwd2RHSVhmZXdvOEM4amlyUHlrMnJrMFR5OUFtZlU1ZmMvdXI0Q3RYelZpTnN4c0tQS3ZlTU9tCklHYW9uUkprcEVoa1RXYzVOKzZBQ29GbnA3U2E3enZQaUJVS08rMUhBb0dBR2FZcWNhcDV6NEtieEU5VnFNcDYKM0JnNnU2MFFmUEJXdWJIQmU5c280cTJoWDZSc3FtV0pPVVdMaGlQT25WTHd6UFFXMDR5QVVDVlJ0TElINGM0dApUNEhUZncyOVF0b25RdmFhcTBJcW1COWphQ0FjSEJyZ2RrQUc4NlpjVGpTLzBFeHI3VTBESjBBRzJhSXpDQlhCCk44SjExbDlFRG9HVGg0NzBaZHhJU2tFQ2dZQkRjVFNkS1ZVTGZWZU1lcDJBbm1pb3J0MDZDQUZsV28wb0xidlEKZjhvN3h0NFFQRWJyRjN5YTZKaGU3QW1mTkh3S1R0c0RySmJVMjlJRHlvRXYxZ1gzVzZndEJBUFdvNXUrRitOZgpROWR3WW8vVlpZNEVLRXpNTE14eWYzdUgxSE5LQXBZWnJtWVRFZ0k0YXc1bXBueXEzekVTS1VydlI5cmdpZWs1Cm8rbnhud0tCZ1FESlhSNFFHMjVSNVRDTmlIN20wT2lKckZJUEJoOEFXbVZ1ZXcrdGpVMTlFZ0VVeFlkeS9Vb3IKUG5hK01ZcGw3WWZBOHBjeEI2SUxRZ3poYXR0N25KcEZqRkN1dk0wWkZKTlluODdRQ2VLem4vckRUKzZwSG5JQwpXd3kvQkExR293bmxjOUh6NUxhSnhXdHdrVUR2S1RRSkFIK3E3RGFZZGdoVWdmOUlsSVJhYkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
const TEST_ACCESS_TOKEN_PUBLIC_KEY = "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFzVmN6QVNoUSt0Ymdrc29FNnREVgoxMTM5N0pPd0R3OGg2eWhhNFRhbi9jb3hFNUgyQnJsUzh4MVpvRGtNVEZWajZxM3UvMG1qaXVBODQ2WHdoRVZECmlJVlQ2T0RBd0o1UFNuSmlwUWdRZnYrM0NBTmZtTStndlpBZHFiNEtVSUJFK2dLY21GR2drKy9ScWE4T0FvOW4KMmM0MWpPUVF5SlN3bXZtblBjLzFER01UYkI5U3o3akpuQmdPM2tDb3dFWjMrVWJNOU95WmU2ODNSTEc1NElOYwpNMnlEa1lpakFhSXRIa3ZJU1BEdjkyTlY4Y2labzMvTkluUVpqYTk1Um9DQUphcitndUxNSWV0Q3RWQjJ1NUpXCkp2NEc2cmR4dlF2djZZc0Vzd3pzREpHUjJ1dVNuMkdMbWxsdi9wTUJrUFdOaGRidnc2OWNvK1kvWmgxRElDYnEKTndJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg=="

func BenchmarkLoginIssuer(b *testing.B) {
	authService, authInfo := prepareAuthService(b)

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, _, _, err := authService.issueTokensOnLogin(authInfo)
		require.NoError(b, err)
	}
}

func BenchmarkRefreshIssuer(b *testing.B) {
	ctx := context.Background()
	authService, authInfo := prepareAuthService(b)
	_, refreshToken, _, _ := authService.issueTokensOnLogin(authInfo)

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := authService.Refresh(ctx, []byte(refreshToken))
		require.NoError(b, err)
	}
}

func BenchmarkRefreshIssuerPartial(b *testing.B) {
	ctx := context.Background()
	authService, authInfo := prepareAuthService(b)
	_, refreshToken, _, _ := authService.issueTokensOnLogin(authInfo)

	claims, err := authService.refreshValidateToken(ctx, []byte(refreshToken))
	require.NoError(b, err)

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, _, err := authService.issueTokensOnRefresh(claims)
		require.NoError(b, err)
	}
}

func BenchmarkTokenValidateAccessToken(b *testing.B) {
	ctx := context.Background()
	authService, authInfo := prepareAuthService(b)
	accessToken, _, _, _ := authService.issueTokensOnLogin(authInfo)

	validateService := &ValidateService{
		publicKeys: map[string]*rsa.PublicKey{
			authService.getConfig().AccessKeyID: authService.getConfig().AccessPublicKey,
		},
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		err := validateService.Validate(ctx, accessToken)
		require.NoError(b, err)
	}
}

func prepareAuthService(t require.TestingT) (*AuthService, any) {
	privk, publk, err := util.DecodeKeyPair(TEST_ACCESS_TOKEN_PRIVATE_KEY, TEST_ACCESS_TOKEN_PUBLIC_KEY)
	require.NoError(t, err)

	accessKeyID := "acc" + "54cd3d7f-9538-4663-9533-3085bf47c735"
	refreshKeyID := "ref" + "590aa1ac-b776-4c53-bcc9-99656842419b"
	authService := &AuthService{}
	authService.setConfig(&AuthServiceConfig{
		AccessTokenTTL:  time.Hour,
		RefreshTokenTTL: time.Hour * 24,

		AccessKeyID:      accessKeyID,
		AccessPrivateKey: privk,
		AccessPublicKey:  publk,

		RefreshKeyID:      refreshKeyID,
		RefreshPrivateKey: privk,
		RefreshPublicKeys: map[string]*rsa.PublicKey{
			refreshKeyID: publk,
		},
	})

	return authService, nil
}
